package mygenetics

import (
	"fmt"
	"strings"
)

type Gene struct {
	// Name –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–µ–Ω–∞.
	Name string

	// Interpretation –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≥–µ–Ω–∞.
	Interpretation []string
}

// Reccommendation –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.
type Reccommendation struct {
	// Nutrition –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.
	Nutrition []string

	// Additional –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
	Additional []string

	// Checklist –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–µ–∫–ª–∏—Å—Ç.
	Checklist []string
}

// Feature –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç—Ä–æ–∏—Ç—Å—è –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.
type Feature struct {
	// Name –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞.
	Name string

	// Conclusions –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É.
	Conclusions []string

	// Genes –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–µ–Ω–æ–≤ –≤ –ø—Ä–∏–∑–Ω–∞–∫–µ.
	Genes []Gene

	// Recommendations –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É.
	Recommendation Reccommendation
}

func (f Feature) String() string {
	sb := new(strings.Builder)

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	sb.WriteString(fmt.Sprintf("<b>üß¨ –ü—Ä–∏–∑–Ω–∞–∫: %s</b>\n\n", f.Name))

	// –ì–µ–Ω—ã
	if len(f.Genes) > 0 {
		sb.WriteString("<b>üî¨ –í—Ö–æ–¥—è—â–∏–µ –≥–µ–Ω—ã:</b>\n")
		for _, gene := range f.Genes {
			sb.WriteString(fmt.Sprintf("‚Ä¢ <b>%s</b>\n", gene.Name))
			if len(gene.Interpretation) > 0 {
				sb.WriteString(
					fmt.Sprintf(
						"  <i>%s</i>\n",
						strings.Join(gene.Interpretation, " "),
					),
				)
			}
		}
		sb.WriteString("\n")
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

	if len(f.Recommendation.Nutrition) > 0 ||
		len(f.Recommendation.Additional) > 0 ||
		len(f.Recommendation.Checklist) > 0 {
		sb.WriteString("<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n")
	}

	if len(f.Recommendation.Nutrition) > 0 {
		sb.WriteString("<b>üçé –ü–∏—Ç–∞–Ω–∏–µ:</b>\n")
		for _, n := range f.Recommendation.Nutrition {
			sb.WriteString(fmt.Sprintf("‚Ä¢ %s\n", n))
		}
		sb.WriteString("\n")
	}

	if len(f.Recommendation.Additional) > 0 {
		sb.WriteString("<b>üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n")
		for _, a := range f.Recommendation.Additional {
			sb.WriteString(fmt.Sprintf("‚Ä¢ %s\n", a))
		}
		sb.WriteString("\n")
	}

	if len(f.Recommendation.Checklist) > 0 {
		sb.WriteString("<b>‚úÖ –ß–µ–∫–ª–∏—Å—Ç:</b>\n")
		for _, c := range f.Recommendation.Checklist {
			sb.WriteString(fmt.Sprintf("‚Ä¢ %s\n", c))
		}
		sb.WriteString("\n")
	}

	// –ó–∞–∫–ª—é—á–µ–Ω–∏—è
	if len(f.Conclusions) > 0 {
		sb.WriteString("<b>üìã –ó–∞–∫–ª—é—á–µ–Ω–∏—è:</b>\n")
		for _, c := range f.Conclusions {
			sb.WriteString(fmt.Sprintf("‚Ä¢ %s\n", c))
		}
	}

	return sb.String()
}
