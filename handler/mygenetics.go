package handler

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/muzykantov/health-gpt/chat"
	"github.com/muzykantov/health-gpt/mygenetics"
	"github.com/muzykantov/health-gpt/server"
)

const MyGeneticsCodelabsPrompt = `
–¢—ã - –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è, —Å–ª–µ–¥—É—è —ç—Ç–∏–º —à–∞–≥–∞–º:
1. –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•
- –ò–∑—É—á–∏ –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
- –û–ø—Ä–µ–¥–µ–ª–∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
- –û—Ü–µ–Ω–∏ —Å—Ç–µ–ø–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é
2. –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
–û–ë–©–ï–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
- –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –∏—Ö —É—Ä–æ–≤–µ–Ω—å (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π/—É–º–µ—Ä–µ–Ω–Ω—ã–π/–≤—ã—Å–æ–∫–∏–π)
- –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
–ü–∏—Ç–∞–Ω–∏–µ:
- –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
- –ü—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –≤–∫–ª—é—á–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω
- –ü—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è
- –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã
–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ:
- –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∏ –∏—Ö –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
- –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã
- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
3. –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê
- –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –£—á–∏—Ç—ã–≤–∞–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –£–∫–∞–∂–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –û—Ç–º–µ—Ç—å, –∫–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤—Ä–∞—á–æ–º
4. –§–û–†–ú–ê–¢ –í–´–í–û–î–ê
üî¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:
[–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π]
‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:
[–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è]
üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
[–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º]
‚è∞ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
[–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å]
üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:
[–í–∞–∂–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è]
–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown, –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∫—É—Ä—Å–∏–≤ –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–†–∞–∑–¥–µ–ª—è–π —Å–µ–∫—Ü–∏–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ (‚Ä¢) –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
`

func MyGenetics() server.Handler {
	return server.HandlerFunc(
		func(ctx context.Context, w server.ResponseWriter, r *server.Request) {
			switch content := r.Incoming.Content.(type) {
			case string:
				myGeneticsCodelabs().Serve(ctx, w, r)

			case chat.SelectContentItem:
				myGeneticsCodelab(content.Data).Serve(ctx, w, r)

			default:
				w.WriteResponse(chat.NewMessage(chat.RoleAssistant, "‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."))
			}
		},
	)
}

func myGeneticsCodelabs() server.Handler {
	return server.HandlerFunc(
		func(ctx context.Context, w server.ResponseWriter, r *server.Request) {
			access := mygenetics.AccessToken(r.From.Tokens)

			codelabs, err := mygenetics.DefaultClient.FetchCodelabs(ctx, access)
			if err != nil {
				w.WriteResponse(
					chat.NewMessage(
						chat.RoleAssistant,
						fmt.Sprint("‚õî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤: ", err),
					),
				)
			}

			if len(codelabs) == 0 {
				w.WriteResponse(
					chat.NewMessage(chat.RoleAssistant, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
				)

				return
			}

			content := chat.SelectContent{
				Header: "üß™ –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —á–∞—Ç:",
			}
			for _, codelab := range codelabs {
				content.Items = append(content.Items, chat.SelectContentItem{
					Caption: fmt.Sprintf("%s (%s)", codelab.Name, codelab.Code),
					Data:    codelab.Code,
				})
			}

			w.WriteResponse(
				chat.NewMessage(chat.RoleAssistant, content),
			)

			content = chat.SelectContent{
				Header: "üß™  –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –ò–ò:",
			}
			for _, codelab := range codelabs {
				content.Items = append(content.Items, chat.SelectContentItem{
					Caption: fmt.Sprintf("%s (%s)", codelab.Name, codelab.Code),
					Data:    "ai:" + codelab.Code,
				})
			}

			w.WriteResponse(
				chat.NewMessage(chat.RoleAssistant, content),
			)
		},
	)
}

func myGeneticsCodelab(code string) server.Handler {
	return server.HandlerFunc(
		func(ctx context.Context, w server.ResponseWriter, r *server.Request) {
			defer myGeneticsCodelabs().Serve(ctx, w, r)

			var useAI bool
			if strings.HasPrefix(code, "ai:") {
				code = strings.TrimPrefix(code, "ai:")
				useAI = true
			}

			w.WriteResponse(
				chat.NewMessage(
					chat.RoleAssistant,
					fmt.Sprintf("üß™ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ %s...", code),
				),
			)

			features, err := mygenetics.DefaultClient.FetchFeatures(
				ctx,
				mygenetics.AccessToken(r.From.Tokens),
				code,
			)
			if err != nil {
				w.WriteResponse(
					chat.NewMessage(
						chat.RoleAssistant,
						fmt.Sprint("‚õî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∞–ª–∏–∑–µ: ", err),
					),
				)

				return
			}

			if !useAI {
				for i, feature := range features {
					time.Sleep(time.Millisecond * 300)
					select {
					case <-ctx.Done():
						return

					default:
						w.WriteResponse(
							chat.NewMessage(
								chat.RoleAssistant,
								feature.String()+
									"\n"+
									fmt.Sprintf(
										"üìë –ü—Ä–∏–∑–Ω–∞–∫ %d –∏–∑ %d.", i+1, len(features),
									),
							),
						)
					}
				}

				return
			}

			msgs := make([]chat.Message, 0, len(features)+1)

			msgs = append(msgs, chat.NewMessage(
				chat.RoleSystem,
				MyGeneticsCodelabsPrompt,
			))

			for _, feature := range features {
				msgs = append(msgs, chat.NewMessage(
					chat.RoleUser,
					feature.String(),
				))
			}

			w.WriteResponse(
				chat.NewMessage(
					chat.RoleAssistant,
					fmt.Sprintf("üìë –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d", len(features)),
				),
			)

			w.WriteResponse(
				chat.NewMessage(
					chat.RoleAssistant,
					fmt.Sprintf("‚åõ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ò–ò –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ %s...", code),
				),
			)

			response, err := r.Completer.CompleteChat(ctx, msgs)
			if err != nil {
				w.WriteResponse(
					chat.NewMessage(
						chat.RoleAssistant,
						fmt.Sprint("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò: ", err),
					),
				)

				return
			}

			w.WriteResponse(
				chat.NewMessage(
					chat.RoleAssistant,
					response.Content,
				),
			)
		},
	)
}
