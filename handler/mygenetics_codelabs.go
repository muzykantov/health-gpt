package handler

import (
	"context"
	"fmt"

	"github.com/muzykantov/health-gpt/chat"
	"github.com/muzykantov/health-gpt/chat/content"
	"github.com/muzykantov/health-gpt/mygenetics"
	"github.com/muzykantov/health-gpt/server"
)

func myGeneticsCodelabs(cmd Command) server.Handler {
	return server.HandlerFunc(
		func(ctx context.Context, w server.ResponseWriter, r *server.Request) {
			access := mygenetics.AccessToken(r.From.Tokens)
			if access == "" {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email –∏ –ø–∞—Ä–æ–ª—å."))
				return
			}

			codelabs, err := mygenetics.DefaultClient.FetchCodelabs(ctx, access)
			if err != nil {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."))
				return
			}

			if len(codelabs) == 0 {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤. " +
					"–ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."))
				return
			}

			var (
				cmdMyGenetics   = cmd == CmdMyGenetics || cmd == CmdUnspecified
				cmdMyGeneticsAI = cmd == CmdMyGeneticsAI || cmd == CmdUnspecified
			)

			if cmdMyGenetics {
				msgContent := content.Select{
					Header: "üß™ –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
				}
				for _, codelab := range codelabs {
					msgContent.Items = append(msgContent.Items, content.SelectItem{
						Caption: fmt.Sprintf("%s (%s)", codelab.Name, codelab.Code),
						Data:    PrefixCodelab + codelab.Code,
					})
				}

				w.WriteResponse(chat.MsgA(msgContent))
			}

			if cmdMyGeneticsAI {
				msgContent := content.Select{
					Header: "üß™ –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è " +
						"—Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò:",
				}
				for _, codelab := range codelabs {
					msgContent.Items = append(msgContent.Items, content.SelectItem{
						Caption: fmt.Sprintf("%s (%s)", codelab.Name, codelab.Code),
						Data:    PrefixAI + codelab.Code,
					})
				}

				w.WriteResponse(chat.MsgA(msgContent))
			}
		},
	)
}
