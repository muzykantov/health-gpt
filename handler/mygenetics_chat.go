package handler

import (
	"context"
	_ "embed"
	"time"

	"github.com/muzykantov/health-gpt/chat"
	"github.com/muzykantov/health-gpt/chat/content"
	"github.com/muzykantov/health-gpt/mygenetics"
	"github.com/muzykantov/health-gpt/server"
)

//go:embed prompts/chat.txt
var myGeneticsChatPrompt string

// myGeneticsChat —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ
// –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤. –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func myGeneticsChat() server.Handler {
	return server.HandlerFunc(
		func(ctx context.Context, w server.ResponseWriter, r *server.Request) {
			msgText, ok := r.Incoming.Content.(string)
			if !ok {
				w.WriteResponse(chat.MsgA("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."))
				r.ErrorLog.Printf("invalid message content type (chatID: %d): expected string, got %T",
					r.ChatID, r.Incoming.Content)
				return
			}

			access := mygenetics.AccessToken(r.From.Tokens)
			if access == "" {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email –∏ –ø–∞—Ä–æ–ª—å."))
				return
			}

			history, err := r.History.ReadChatHistory(ctx, r.ChatID, 100)
			if err != nil {
				w.WriteResponse(chat.MsgAf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: %v", err))
				r.ErrorLog.Printf("failed to read chat history (chatID: %d): %v", r.ChatID, err)
				return
			}

			// –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AI
			var filteredHistory []chat.Message
			for _, msg := range history {
				if text, ok := msg.Content.(string); ok {
					msg.Content = text
					filteredHistory = append(filteredHistory, msg)
				}
			}

			// w.WriteResponse(chat.MsgA("üîç –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã..."))

			codelabs, err := mygenetics.DefaultClient.FetchCodelabs(ctx, access)
			if err != nil {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."))
				r.ErrorLog.Printf("failed to fetch codelabs (chatID: %d): %v", r.ChatID, err)
				return
			}

			if len(codelabs) == 0 {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–Ω–∞–ª–∏–∑—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."))
				return
			}

			var allFeatures []string
			for _, codelab := range codelabs {
				features, err := mygenetics.DefaultClient.FetchFeatures(ctx, access, codelab.Code)
				if err != nil {
					w.WriteResponse(chat.MsgAf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ %s: %v",
						codelab.Code, err))
					r.ErrorLog.Printf("failed to fetch features for codelab %s (chatID: %d): %v",
						codelab.Code, r.ChatID, err)
					continue
				}
				for _, feature := range features {
					allFeatures = append(allFeatures, feature.String())
				}
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI:
			// —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–µ + –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã + –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ + –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			msgs := make([]chat.Message, 0, 1+len(allFeatures)+len(filteredHistory)+1)
			msgs = append(msgs, chat.MsgS(myGeneticsChatPrompt))
			for _, feature := range allFeatures {
				msgs = append(msgs, chat.MsgU(feature))
			}
			msgs = append(msgs, filteredHistory...)
			msgs = append(msgs, chat.MsgU(msgText))

			// w.WriteResponse(chat.MsgA("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..."))

			done := make(chan struct{})
			go func() {
				ticker := time.NewTicker(time.Second)
				for {
					select {
					case <-ticker.C:
						w.WriteResponse(chat.MsgA(content.Typing{}))
					case <-done:
						return
					}
				}
			}()

			response, err := r.Completer.CompleteChat(ctx, msgs)
			if err != nil {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."))
				r.ErrorLog.Printf("failed to complete chat (chatID: %d): %v", r.ChatID, err)
				return
			}

			done <- struct{}{}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–ª—é—Å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			newHistory := make([]chat.Message, len(history)+2)
			copy(newHistory, history)
			newHistory[len(history)] = chat.MsgU(msgText)
			newHistory[len(history)+1] = chat.MsgA(response.Content)

			if err := r.History.WriteChatHistory(ctx, r.ChatID, newHistory); err != nil {
				w.WriteResponse(chat.MsgAf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: %v", err))
				r.ErrorLog.Printf("failed to write chat history (chatID: %d): %v", r.ChatID, err)
				return
			}

			w.WriteResponse(chat.MsgA(response.Content))
		},
	)
}
