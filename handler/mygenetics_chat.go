package handler

import (
	"context"
	_ "embed"
	"fmt"
	"strings"
	"time"

	"github.com/muzykantov/health-gpt/chat"
	"github.com/muzykantov/health-gpt/chat/content"
	"github.com/muzykantov/health-gpt/handler/prompts"
	"github.com/muzykantov/health-gpt/mygenetics"
	"github.com/muzykantov/health-gpt/server"
)

const (
	myGeneticsChatPrompt = "chat"
	codelabCodeCacheKey  = "chat_codelab_code:%d"
)

// myGeneticsChat —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ
// –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤. –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func myGeneticsChat(data SelectItemData) server.Handler {
	return server.HandlerFunc(
		func(ctx context.Context, w server.ResponseWriter, r *server.Request) {
			var (
				codelabCodeCacheKey = fmt.Sprintf(codelabCodeCacheKey, r.ChatID)
				codelabCode         string
				msgText             string
				sendCode            bool
			)

			access := mygenetics.AccessToken(r.From.Tokens)
			if access == "" {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email –∏ –ø–∞—Ä–æ–ª—å."))
				return
			}

			switch {
			case data == "":
				var ok bool

				msgText, ok = r.Incoming.Content.(string)
				if !ok {
					w.WriteResponse(chat.MsgA("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."))
					r.Log.Printf("invalid message content type (chatID: %d): expected string, got %T",
						r.ChatID, r.Incoming.Content)
					return
				}

				if cachedCodelab, ok := r.Cache.Get(codelabCodeCacheKey); ok {
					codelabCode = cachedCodelab.(string)
					sendCode = true
					break
				}

				codelabs, err := mygenetics.DefaultClient.FetchCodelabs(ctx, access)
				if err != nil {
					w.WriteResponse(chat.MsgA("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã. " +
						"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."))
					r.Log.Printf("failed to fetch codelabs (chatID: %d): %v", r.ChatID, err)
					return
				}

				switch len(codelabs) {
				case 0:
					w.WriteResponse(chat.MsgA("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤. " +
						"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–Ω–∞–ª–∏–∑—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."))
					return

				case 1:
					codelabCode = codelabs[0].Code
					sendCode = false

				default:
					msgContent := content.Select{
						Header: "üß¨ –£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω. " +
							"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –ø–æ–∫–∞ –≤—ã–±–æ—Ä –Ω–µ —Å–±—Ä–æ—Å–∏—Ç—Å—è " +
							"(–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /clear).",
					}
					for _, codelab := range codelabs {
						msgContent.Items = append(msgContent.Items, content.SelectItem{
							Caption: fmt.Sprintf("%s (%s)", codelab.Name, codelab.Code),
							Data: fmt.Sprintf(
								"%s%s:%s",
								PrefixAIChat,
								codelab.Code,
								r.Incoming.ID,
							),
						})
					}

					r.Cache.Add(PrefixAIChat+r.Incoming.ID, msgText)

					w.WriteResponse(chat.MsgA(msgContent))
					return
				}

			case strings.HasPrefix(data, PrefixAIChat):
				parts := strings.SplitN(strings.TrimPrefix(data, PrefixAIChat), ":", 2)
				if len(parts) != 2 {
					w.WriteResponse(chat.MsgA("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."))
					r.Log.Printf("invalid message parts (chatID: %d): %v",
						r.ChatID, parts)
					return
				}

				msg, ok := r.Cache.Get(PrefixAIChat + parts[1])
				if !ok {
					w.WriteResponse(chat.MsgA("‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ."))
					r.Log.Printf("invalid message cache id (chatID: %d): %s",
						r.ChatID, parts[1])
					return
				}

				codelabCode = parts[0]
				msgText = msg.(string)
				sendCode = true

				r.Cache.Add(codelabCodeCacheKey, codelabCode)
				if err := r.Storage.SaveChatHistory(ctx, r.ChatID, []chat.Message{
					chat.MsgU(DefaultFirstMessage),
				}); err != nil {
					w.WriteResponse(chat.MsgAf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: %v", err))
					r.Log.Printf("failed to write chat history (chatID: %d): %v", r.ChatID, err)
					return
				}

			default:
				w.WriteResponse(chat.MsgA("‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."))
				return
			}

			featureSet, err := mygenetics.DefaultClient.FetchFeatures(ctx, access, codelabCode)
			if err != nil {
				w.WriteResponse(chat.MsgAf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ %s: %v",
					codelabCode, err))
				r.Log.Printf("failed to fetch features for codelab %s (chatID: %d): %v",
					codelabCode, r.ChatID, err)
				return
			}

			/*
				var featureSet genetics.FeatureSet
				for _, codelab := range codelabs {
					features, err := mygenetics.DefaultClient.FetchFeatures(ctx, access, codelab.Code)
					if err != nil {
						w.WriteResponse(chat.MsgAf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ %s: %v",
							codelab.Code, err))
						r.Log.Printf("failed to fetch features for codelab %s (chatID: %d): %v",
							codelab.Code, r.ChatID, err)
						continue
					}

					featureSet = featureSet.MergeWith(features)
				}
			*/

			// -----------------------------------------------------------------
			// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI:
			// -----------------------------------------------------------------

			history, err := r.Storage.GetChatHistory(ctx, r.ChatID, 100)
			if err != nil {
				w.WriteResponse(chat.MsgAf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: %v", err))
				r.Log.Printf("failed to read chat history (chatID: %d): %v", r.ChatID, err)
				return
			}

			var filteredHistory []chat.Message
			for _, msg := range history {
				if text, ok := msg.Content.(string); ok {
					if text == DefaultFirstMessage {
						continue
					}

					msg.Content = text
					filteredHistory = append(filteredHistory, msg)
				}
			}

			prompt := prompts.Get(myGeneticsChatPrompt, r.Completer.ModelName())
			if prompt == prompts.Default {
				w.WriteResponse(chat.MsgA("‚õî –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
				return
			}

			contextMsg := "–°–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã:\n\n" +
				featureSet.BuildLLMContext() +
				"\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ."

			msgs := make([]chat.Message, 0, 3+len(filteredHistory))
			msgs = append(msgs, chat.MsgS(prompt))     // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
			msgs = append(msgs, chat.MsgU(contextMsg)) // –î–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
			confirmationMsg := "–Ø –∏–∑—É—á–∏–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ. " +
				"–¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
			msgs = append(msgs, chat.MsgA(confirmationMsg))

			// –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
			msgs = append(msgs, filteredHistory...)

			// –ò —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			msgs = append(msgs, chat.MsgU(msgText))

			// -----------------------------------------------------------------

			w.WriteResponse(chat.MsgA("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..."))

			done := make(chan struct{})
			go func() {
				w.WriteResponse(chat.MsgA(content.Typing{}))
				ticker := time.NewTicker(time.Second * 10)
				for {
					select {
					case <-ticker.C:
						w.WriteResponse(chat.MsgA(content.Typing{}))
					case <-done:
						return
					}
				}
			}()

			response, err := r.Completer.CompleteChat(ctx, msgs)
			if err != nil {
				w.WriteResponse(chat.MsgA("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. " +
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."))
				r.Log.Printf("failed to complete chat (chatID: %d): %v", r.ChatID, err)
				return
			}

			done <- struct{}{}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–ª—é—Å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			newHistory := make([]chat.Message, len(history)+2)
			copy(newHistory, history)
			newHistory[len(history)] = chat.MsgU(msgText)
			newHistory[len(history)+1] = chat.MsgA(response.Content)

			if err := r.Storage.SaveChatHistory(ctx, r.ChatID, newHistory); err != nil {
				w.WriteResponse(chat.MsgAf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: %v", err))
				r.Log.Printf("failed to write chat history (chatID: %d): %v", r.ChatID, err)
				return
			}

			if !sendCode {
				w.WriteResponse(chat.MsgA(response.Content))
			} else {
				w.WriteResponse(chat.MsgAf(
					"üß† –í–æ—Ç, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ %s.\n\n%s",
					codelabCode,
					response.Content,
				))
			}
		},
	)
}
